#include <stdio.h>
#include <stdlib.h>

typedef struct TreeNode *PtrToNode;
typedef struct TreeNode *Tree;

struct TreeNode{
	int element;
	Tree left;
	Tree right;
};

void MakeEmpty(Tree tree);
Tree Insert(Tree tree, int value);
Tree Delete(Tree tree, int value);
PtrToNode Find(Tree tree, int value);
PtrToNode FindMin(Tree tree);
PtrToNode FindMax(Tree tree);
void Print(Tree tree);
void PrintInorder(Tree tree);

int main(int argc, char* argv[]){
	FILE *input;
	Tree tree = NULL;
	char command;
	int value;

	input = fopen(argv[1], "r");
	if(input == NULL){
		printf("File %s open failed\n", argv[1]);
		return 0;
	}

	while(1){
		command = fgetc(input);
		if(feof(input)) break;

		switch(command){
			case 'i':
				fscanf(input, "%d", &value);
				tree = Insert(tree, value);
				break;
			case 'd':
				fscanf(input, "%d", &value);
				tree = Delete(tree, value);
				break;
			case 'f':
				fscanf(input, "%d", &value);
				PtrToNode result = Find(tree, value);
				if(result != NULL) printf("element %d exist.\n", result->element);
				break;
			case 'm':
				Print(tree);
				break;
			case 'p':
				printf("Inorder : ");
				PrintInorder(tree);
				printf("\n");
				break;
			default:
				break;
		}
	}
	MakeEmpty(tree);

	return 0;
}

void MakeEmpty(Tree tree){
	if(tree == NULL) return;
	
	MakeEmpty(tree->left);
	MakeEmpty(tree->right);
	free(tree);
}

Tree Insert(Tree tree, int value){
	if(tree == NULL){
		tree = (Tree)malloc(sizeof(struct TreeNode));
		tree->element = value;
		tree->left = NULL;
		tree->right = NULL;
	}
	else if(tree->element > value){
		tree->left = Insert(tree->left, value);
	}
	else if(tree->element < value){
		tree->right = Insert(tree->right, value);
	}
	else{
		printf("Insert failed : Element %d is existed.\n", value);
	}
	return tree;
}

Tree Delete(Tree tree, int value){
	if(tree == NULL){
		printf("Delete failed : Element %d not found.\n", value);
	}
	else if(tree->element > value){
		tree->left = Delete(tree->left, value);
	}
	else if(tree->element < value){
		tree->right = Delete(tree->right, value);
	}
	else if(tree->left && tree->right){
		Tree tmp = FindMin(tree->right);
		tree->element = tmp->element;
		tree->right = Delete(tree->right, tree->element);
	}
	else{
		if(tree->left == NULL) tree = tree->right;
		else if(tree->right == NULL) tree = tree->left;
	}
	return tree;
}

PtrToNode Find(Tree tree, int value){
	if(tree == NULL){
		printf("Find failed : Element %d not found.\n", value);
		return NULL;
	}
	if(tree->element > value) return Find(tree->left, value);
	else if(tree->element < value) return Find(tree->right, value);
	
	return tree;
}

PtrToNode FindMin(Tree tree){
	if(tree == NULL) return NULL;
	else if(tree->left == NULL) return tree;
	
	return FindMin(tree->left);
}

PtrToNode FindMax(Tree tree){
	Tree temp = tree;
	while(temp != NULL && temp->right != NULL){
		temp = temp->right;
	}
	return temp;
}

void Print(Tree tree){
	PtrToNode minTree = FindMin(tree);
	PtrToNode maxTree = FindMax(tree);
	if(minTree == NULL) printf("Min : NULL");
	else printf("Min : %d", minTree->element);
	printf("\n");
	if(maxTree == NULL) printf("Max : NULL");
	else printf("Max : %d", maxTree->element);
	printf("\n");
}

void PrintInorder(Tree tree){
	if(tree == NULL) return;

	PrintInorder(tree->left);
	printf("%d ", tree->element);
	PrintInorder(tree->right);
}
